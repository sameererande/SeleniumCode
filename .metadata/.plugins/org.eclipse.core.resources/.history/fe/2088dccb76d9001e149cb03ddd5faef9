import static org.testng.Assert.assertEquals;

import java.io.FileInputStream;
import java.time.Duration;
import java.util.Iterator;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.util.NumberToTextConverter;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import graphql.Assert;

public class UploadDownload {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String fruitName="Apple";

		WebDriver driver=new ChromeDriver();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(7));
		driver.get("https://rahulshettyacademy.com/upload-download-test/index.html");
	   //Download
		driver.findElement(By.cssSelector(".button")).click();
		
		//Edit Excel-getCoulmnNumber of price--getRowNumber of Apple--update excel with row
		FileInputStream fis=new FileInputStream("C://ExcelFile//demoData.xlsx");
		XSSFWorkbook workbook=new XSSFWorkbook(fis);
		int sheets=workbook.getNumberOfSheets();       //return type of workbook.getNumberOfSheets() is int
		for(int i=0;i<sheets;i++)
		{
			if(workbook.getSheetName(i).equalsIgnoreCase("testData"))
			{
			XSSFSheet sheet=workbook.getSheetAt(i); // here return type workbook.getSheetAt(i) is XSSFSheet
			//Step1)  Identify Testcases column by scanning the entire 1st row
			Iterator<Row> rows=sheet.iterator(); //return type is Iterator<Row>  //Sheet is collection of row
			Row firstrow=rows.next();  //Acess to 1st row
			//Scan first row by read each and every cell of that row
			Iterator<Cell> ce=firstrow.cellIterator();  //row is collection of cell
			int k=0;
			int column = 0;
			while(ce.hasNext())  //is next cell present then only goes inside 
			{
				Cell value=ce.next();
				if(value.getStringCellValue().equalsIgnoreCase("Testcases"))     
						{
							column=k;
						}
				k++;
			}
			System.out.println(column);   //print the column number index
			
			
			//Step2) //Once column is identified then scan entire testcase column to identify purchase testcase row.
			while(rows.hasNext())
			{
				Row r=rows.next();
				if(r.getCell(column).getStringCellValue().equalsIgnoreCase(testcaseName))
				{
					//Step3)After you grab purchase testcase row pull all the data of that row and feed into test
					Iterator<Cell> cv=r.cellIterator();
					while(cv.hasNext())
					{
						//System.out.println(cv.next().getStringCellValue()); //printing data in output
						Cell c=cv.next();
						if(c.getCellType()==CellType.STRING)
						{
						a.add(c.getStringCellValue());						
					}
						else {
							a.add(NumberToTextConverter.toText(c.getNumericCellValue()));  //Parsing the value
							
						}
							
						}
				}
			
			}
						
		}
		
		}
		return a;
		
		
		//Upload
		WebElement upload=driver.findElement(By.cssSelector("input[type='file']"));
		upload.sendKeys("C:\\Users\\samee\\Downloads\\download.xlsx");  //send the path where file is sitting in machine
		//wait for success message to show up and wait for disappear
		By toastLocator=By.cssSelector(".Toastify__toast-body div:nth-child(2)");
		WebDriverWait wait=new WebDriverWait(driver,Duration.ofSeconds(10));
		wait.until(ExpectedConditions.visibilityOfElementLocated(toastLocator));
		String toastText=driver.findElement(toastLocator).getText();
		System.out.println(toastText);
		assertEquals("Updated Excel Data Successfully.",toastText);
		wait.until(ExpectedConditions.invisibilityOfElementLocated(toastLocator));
	
		//Verify updated excel data showing in the web table
		String priceColumn=driver.findElement(By.xpath("//div[text()='Price']")).getAttribute("data-column-id");
		System.out.println(priceColumn);
		String actualPrice=driver.findElement(By.xpath("//div[text()='"+fruitName+"']/parent::div/parent::div/div[@id='cell-"+priceColumn+"-undefined']")).getText();
		System.out.println(actualPrice);
		assertEquals("350",actualPrice);
		
		
		
	
	
	
	
	}

}
